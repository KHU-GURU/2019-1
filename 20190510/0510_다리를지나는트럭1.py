def solution(bridge_length, weight, truck_weights):
    answer = 0
    # 다리 길이만큼 0(무게)을 넣은 queue생성
    q = [0] * bridge_length

    while q:  # 다리에 트럭이 존재하는 동안(트럭이 남아있으면 다리가 존재한다.)
        q.pop(0)  # 트럭이 한 칸씩 전진하고
        answer += 1  # 1초가 흐른다.
        if truck_weights:  # 대기 트럭이 존재하는 동안
            if (sum(q) + truck_weights[0] <= weight):  # 다리에 올라간 트럭 무게+대기 트럭[0]의 무게<=weight 이면
                q.append(truck_weights.pop(0))
            else:  # 중량초과 상태면 다리에 대기 트럭[0]을 올릴 수 없다.
                q.append(0)

    return answer

'''
Programmers Level3 Stack/Queue
#O(n)

실행 결과
테스트 1
입력값 〉	2, 10, [7, 4, 5, 6]
기댓값 〉	8
실행 결과 〉	테스트를 통과하였습니다.
테스트 2
입력값 〉	100, 100, [10]
기댓값 〉	101
실행 결과 〉	테스트를 통과하였습니다.
테스트 3
입력값 〉	100, 100, [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]
기댓값 〉	110
실행 결과 〉	테스트를 통과하였습니다.
테스트 결과 (~˘▾˘)~
3개 중 3개 성공
'''
'''
채점을 시작합니다.
정확성  테스트
테스트 1 〉	통과 (12.47ms, 10.8MB)
테스트 2 〉	통과 (1322.51ms, 10.9MB)
테스트 3 〉	통과 (0.05ms, 10.7MB)
테스트 4 〉	통과 (293.77ms, 10.7MB)
테스트 5 〉	통과 (8493.51ms, 10.7MB)
테스트 6 〉	통과 (1474.37ms, 10.7MB)
테스트 7 〉	통과 (5.50ms, 10.7MB)
테스트 8 〉	통과 (0.25ms, 10.8MB)
테스트 9 〉	통과 (5.75ms, 10.6MB)
테스트 10 〉	통과 (0.30ms, 10.7MB)
테스트 11 〉	통과 (0.04ms, 10.7MB)
테스트 12 〉	통과 (0.35ms, 10.7MB)
테스트 13 〉	통과 (1.92ms, 10.7MB)
'''
